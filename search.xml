<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何使用VS Code写MD</title>
    <url>/2021/07/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8VS_Code%E5%86%99MD/</url>
    <content><![CDATA[<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>语法：<a href="https://www.runoob.com/markdown/md-tutorial.html">MarkDown</a></p>
<p>编写平台：vs code</p>
<p>插件：Markdown Preview Enhanced<br>Better Markdown &amp; Latex Shortcuts</p>
<p>参考资料：<br><a href="https://zhuanlan.zhihu.com/p/366596949">https://zhuanlan.zhihu.com/p/366596949</a></p>
]]></content>
  </entry>
  <entry>
    <title>Maya 插件开发学习</title>
    <url>/2021/07/23/Maya_%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Maya-插件开发学习"><a href="#Maya-插件开发学习" class="headerlink" title="Maya 插件开发学习"></a>Maya 插件开发学习</h1><ul>
<li>环境配置<ul>
<li>vs code</li>
<li>maya 脚本编辑器</li>
</ul>
</li>
<li>语言分类<ul>
<li>mel</li>
<li>python</li>
<li>QT</li>
</ul>
</li>
</ul>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="maya-脚本编辑器配置"><a href="#maya-脚本编辑器配置" class="headerlink" title="maya 脚本编辑器配置"></a>maya 脚本编辑器配置</h3><p>如图所示，对脚本编辑器进行配置</p>
<p><img src="Maya_Editor_Set.png" alt="d"></p>
<h3 id="vs-code-环境配置"><a href="#vs-code-环境配置" class="headerlink" title="vs code 环境配置"></a>vs code 环境配置</h3><p>相关参考链接：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1Cz4y1R7MC?from=search&seid=14150298653133706761">Python开发Maya脚本插件 开发环境详细配置</a></li>
</ul>
<h2 id="语言分类"><a href="#语言分类" class="headerlink" title="语言分类"></a>语言分类</h2><h3 id="mel"><a href="#mel" class="headerlink" title="mel"></a>mel</h3><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>  maya.cmds——这是一个把MEL命令用python包装（ wrappers）的库，可以用于替代MEL命令，因为绝大多数的MEL命令都能查找得到一一对应的maya.cmds命令。只适合面向过程编程。</p>
<p>  pymel.core——该pymel库将许多最常用的MEL命令和API的方法重组到类的层次结构中，这样的设计让你的编程更简单易懂，更具有pythonic化，因为它是具有真正意义上的面向对象特性。由于该pymel库是第三方开发的，Autodesk公司并不提供技术上的支持帮助。</p>
<p>  maya.OpenMaya——这是Maya C++ API的Python包装（ wrappers）的库，称之为Python API 1.0， 适合开发插件和需要MEL未公开的功能的其他任务。</p>
<p>  maya.api.OpenMaya——这是Maya C++ API的Python包装（ wrappers）的库，称之为Python API 2.0。</p>
<h3 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h3><p>为了通用性，GUI选择QT。</p>
]]></content>
  </entry>
  <entry>
    <title>Autodesk FBX SDK 介绍</title>
    <url>/2021/07/23/Autodesk_FBX_SDK/</url>
    <content><![CDATA[<h1 id="Autodesk-FBX-SDK-介绍"><a href="#Autodesk-FBX-SDK-介绍" class="headerlink" title="Autodesk FBX SDK 介绍"></a>Autodesk FBX SDK 介绍</h1><p><a href="https://www.autodesk.com/products/fbx/overview">Autodesk FBX</a>是Autodesk公司出品的一款用于跨平台的免费三维创作与交换格式的软件，通过FBX用户能访问大多数三维供应商的三维文件。FBX 文件格式支持所有主要的三维数据元素以及二维、音频和视频媒体元素。</p>
<p>官方提供了相对应的SDK提供给开发者使用，有C++，C#，Python等多个版本。相关的<a href="https://www.autodesk.com/products/fbx/overview">下载地址</a>。<br>不同环境安装方案：</p>
<ul>
<li>Unity中，如果安装了了Fbx Exporter插件，会自动内置FBX的SDK库。</li>
<li>Houdini中，请看<a href="https://zhuanlan.zhihu.com/p/144349799">Houdini 对于fbx sdk python的简单应用</a></li>
</ul>
<h3 id="相关学习途径"><a href="#相关学习途径" class="headerlink" title="相关学习途径"></a>相关学习途径</h3><ul>
<li>通过阅读Fbx Exporter的源代码来学习Fbx SDK的使用</li>
<li><a href="https://banexdevblog.wordpress.com/2014/06/23/a-quick-tutorial-about-the-fbx-ascii-format/">A QUICK TUTORIAL ABOUT THE FBX ASCII FORMAT</a></li>
<li><a href="https://www.gamedev.net/tutorials/programming/graphics/how-to-work-with-fbx-sdk-r3582/">How to Work with FBX SDK</a></li>
<li><a href="https://help.autodesk.com/view/FBX/2020/ENU/?guid=FBX_Developer_Help_welcome_to_the_fbx_sdk_html">Welcome to the FBX SDK</a></li>
</ul>
<h3 id="Fbx的数据结构"><a href="#Fbx的数据结构" class="headerlink" title="Fbx的数据结构"></a>Fbx的数据结构</h3><p>Fbx是节点式的数据结构，如下图所示：<br><img src="v2-d9e57228d64b062291395dfbc6f84025_720w.jpg" alt="Fbx结构图"></p>
<h3 id="Fbx-SDK-的使用，以Python为例"><a href="#Fbx-SDK-的使用，以Python为例" class="headerlink" title="Fbx SDK 的使用，以Python为例"></a>Fbx SDK 的使用，以Python为例</h3><p>这是修改Fbx Mesh 属性的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2.7</span></span><br><span class="line"><span class="keyword">import</span> fbx</span><br><span class="line"><span class="keyword">from</span> fbx <span class="keyword">import</span> FbxVector2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Run</span>():</span></span><br><span class="line">    node = hou.pwd()</span><br><span class="line">    fileName=node.parm(<span class="string">&quot;file&quot;</span>).<span class="built_in">eval</span>()</span><br><span class="line">    csv_path = node.parm(<span class="string">&#x27;csv_path&#x27;</span>).<span class="built_in">eval</span>()</span><br><span class="line">    directory = node.parm(<span class="string">&#x27;directory&#x27;</span>).<span class="built_in">eval</span>()</span><br><span class="line">    num =<span class="number">1</span></span><br><span class="line">    <span class="comment">#birth_data = []</span></span><br><span class="line">    <span class="comment">#birth_data.append(fileName)</span></span><br><span class="line">    birth_data = DuplicateArray(ReadCsvByPath(csv_path,num))</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> birth_data:</span><br><span class="line">        </span><br><span class="line">        fileName = os.path.basename(path)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;@&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> fileName:</span><br><span class="line">            <span class="built_in">print</span> path</span><br><span class="line">            <span class="built_in">iter</span>=<span class="number">0</span></span><br><span class="line">            fbxManager = fbx.FbxManager.Create()</span><br><span class="line">            fbxScene = fbx.FbxScene.Create(fbxManager, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            fbxImporter = fbx.FbxImporter.Create(fbxManager, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            fbxImporter.Initialize(path)</span><br><span class="line">            fbxImporter.Import(fbxScene)</span><br><span class="line">            fbxRoot = fbxScene.GetRootNode() </span><br><span class="line">            <span class="keyword">if</span> IsCollider(fileName) == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> GetFbxNodeList(fbxRoot,<span class="built_in">list</span> = []):</span><br><span class="line">                    <span class="comment">#i.GetMesh().ClearLayers()</span></span><br><span class="line">                    <span class="keyword">if</span> i.GetMesh()!= <span class="literal">None</span>:</span><br><span class="line">                        i.GetMesh().ClearLayers()</span><br><span class="line">                        <span class="built_in">iter</span>+=<span class="number">1</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> GetFbxNodeList(fbxRoot,<span class="built_in">list</span> = []):</span><br><span class="line">                <span class="comment">#i.GetMesh().ClearLayers()</span></span><br><span class="line">                <span class="keyword">if</span> i.GetMesh()!= <span class="literal">None</span>:</span><br><span class="line">                    mesh = i.GetMesh()</span><br><span class="line">                    LayerCount = mesh.GetLayerCount()</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(LayerCount):</span><br><span class="line">                        Layer = mesh.GetLayer(j)</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">if</span>(Layer.GetVertexColors()!=<span class="literal">None</span>):</span><br><span class="line">                            Layer.SetVertexColors(<span class="literal">None</span>)</span><br><span class="line">                            <span class="built_in">iter</span>+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> LayerCount&gt;=<span class="number">4</span>:</span><br><span class="line">                        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(LayerCount):</span><br><span class="line">                            <span class="keyword">if</span> j==<span class="number">1</span> <span class="keyword">or</span> j==<span class="number">2</span>:</span><br><span class="line">                                Layer = mesh.GetLayer(j)</span><br><span class="line">                                uv = Layer.GetUVs()</span><br><span class="line">                                DirectArray = uv.GetDirectArray()</span><br><span class="line">                                DirectArray.SetCount(<span class="number">1</span>)</span><br><span class="line">                                DirectArray.SetAt(<span class="number">0</span>,FbxVector2(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">                                <span class="built_in">iter</span>+=<span class="number">1</span></span><br><span class="line">                            <span class="keyword">elif</span> j&gt;<span class="number">3</span>:</span><br><span class="line">                                Layer = mesh.GetLayer(j)</span><br><span class="line">                                Layer.SetUVs(<span class="literal">None</span>)</span><br><span class="line">                                <span class="built_in">iter</span>+=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> LayerCount&lt;<span class="number">4</span>:</span><br><span class="line">                        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(LayerCount):</span><br><span class="line">                            <span class="keyword">if</span> j&gt;<span class="number">0</span>:</span><br><span class="line">                                Layer = mesh.GetLayer(j)</span><br><span class="line">                                Layer.SetUVs(<span class="literal">None</span>)</span><br><span class="line">                                <span class="built_in">iter</span>+=<span class="number">1</span>            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">iter</span>!=<span class="number">0</span>:</span><br><span class="line">                ExportFbx(fbxManager,path,fbxScene)    </span><br><span class="line">            fbxScene.Destroy()</span><br><span class="line">            fbxImporter.Destroy()</span><br><span class="line">            fbxManager.Destroy()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFbxNodeList</span>(<span class="params">fbxRoot,<span class="built_in">list</span> = []</span>):</span></span><br><span class="line">    num = fbxRoot.GetChildCount()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(fbxRoot.GetChildCount()):</span><br><span class="line">        fbxChildRoot = fbxRoot.GetChild(i)</span><br><span class="line">        <span class="built_in">list</span>.append(fbxChildRoot)</span><br><span class="line">        <span class="keyword">if</span> fbxChildRoot.GetChildCount()&gt;<span class="number">0</span> :</span><br><span class="line">            GetFbxNodeList(fbxChildRoot,<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ExportFbx</span>(<span class="params">fbxManager,fileName,fbxScene</span>):</span></span><br><span class="line">    fbxExporter = fbx.FbxExporter.Create(fbxManager, <span class="string">&quot;Exporter&quot;</span>)</span><br><span class="line">    fileFormat = -<span class="number">1</span></span><br><span class="line">    fbxExporter.Initialize(fileName,fileFormat,fbxManager.GetIOSettings())</span><br><span class="line">    fbxExporter.Export(fbxScene)</span><br><span class="line">    fbxExporter.Destroy()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#获取输入路径下的指定类型的文件路径列表       </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFbxListInDirectory</span>(<span class="params">filepath,file_type,<span class="built_in">list</span>=[]</span>):</span></span><br><span class="line">    path_list = os.listdir(filepath)</span><br><span class="line">    <span class="keyword">for</span> f1 <span class="keyword">in</span> path_list:</span><br><span class="line">        f1_path = os.path.join(filepath,f1)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(f1_path):</span><br><span class="line">            suffix = os.path.splitext(f1_path)[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">if</span> suffix.lower() == file_type:</span><br><span class="line">                f1_path.replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                <span class="built_in">list</span>.append(f1_path)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(f1_path):</span><br><span class="line">            GetFbxListInDirectory(f1_path,file_type,<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span> </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IsCollider</span>(<span class="params">fileName</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Collider&quot;</span> <span class="keyword">in</span> fileName <span class="keyword">or</span> <span class="string">&quot;collider&quot;</span> <span class="keyword">in</span> fileName:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DuplicateArray</span>(<span class="params">Imported_Array</span>):</span>     </span><br><span class="line">    <span class="type">List</span> = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Imported_Array:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> <span class="type">List</span>:</span><br><span class="line">            <span class="type">List</span>.append(i)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">List</span></span><br><span class="line"><span class="comment">#读取csv的列信息，并返回一个数组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadCsvByPath</span>(<span class="params">csv_path,num</span>):</span></span><br><span class="line">    birth_data = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(csv_path) <span class="keyword">as</span> csvfile:</span><br><span class="line">        csv_reader = csv.reader(csvfile)  <span class="comment"># 使用csv.reader读取csvfile中的文件</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:  <span class="comment"># 将csv 文件中的数据保存到birth_data中</span></span><br><span class="line">            birth_data.append(<span class="built_in">str</span>(row[num]))</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> birth_data</span><br></pre></td></tr></table></figure>
<h3 id="FBX-SDK-的学习总结"><a href="#FBX-SDK-的学习总结" class="headerlink" title="FBX SDK 的学习总结"></a>FBX SDK 的学习总结</h3><ul>
<li>SDK使用的结构<ul>
<li>FbxManager </li>
<li>FbxScene </li>
<li>FbxImporter</li>
<li>FbxExporter</li>
</ul>
</li>
<li>关于Fbx 属性修改<br>Fbx的Node存在Layer的概念，Layer用于存储各种Mesh的数据，mesh本身的基础数据(如：法线，切线，顶点位置，uv，顶点色)都存储在Layer0上，当模型增加uv2,uv3等数据时，会增加新的Layer层级并存储在对应层级下</li>
</ul>
]]></content>
  </entry>
</search>
